---
title: "Anhang: Data Wrangling"
output:
  html_document:
    df-print: paged
    code_folding: hide
    highlight: haddock
    theme: cosmos
    toc: true
    toc_float: true
---

Data Wrangling bezeichnet im Kontext der psychologischen Datenanalyse mit R den systematischen Prozess der Aufbereitung, Bereinigung und Umstrukturierung von Rohdaten, damit sie für statistische Auswertungen und Interpretationen nutzbar werden.
Ziel ist es, aus unübersichtlichen Rohdaten ein strukturiertes und hochwertiges Daten-Set zu erzeugen, das sich zuverlässig und nachvollziehbar für weiterführende statistische Analysen, Modellierungen und Visualisierungen in R nutzen lässt.

Im Folgenden werden dazu verschiedene Funktionen und Techniken dargestellt.

- basierend auf [Kurs von Ian Hussey](https://github.com/ianhussey/data-wrangling-workshop/)
- Siehe auch [Einführung in R](https://methodenlehre.github.io/einfuehrung-in-R/)

## Notebooks

In diesem Kurs arbeiten wir mit R- bzw. Quarto-Notebooks. Diese enthalten sowohl normalen Text als auch "Chunks" von R-Code. Chunks sind Abschnitte von R-Code. Diese Chunks lassen sich mit einem Klick auf Code --> Insert Chunk (oder der Tastenkombination Alt + Ctrl + I / unter Mac: Alt + Cmd + I) einfügen.
Diese Chunks lassen sich mit einem Klick auf den grünen Play-Button ganz rechts ausführen.
Der Pfeil nach unten Button (zweiter  von Rechts) führt alle Chunks, die vor dem gewählten Chunk gelagert sind, aus.

## Pakete laden

Zunächst laden wir die Pakete, die wir für die Sitzung brauchen.

```{r}
if (!require("pacman")) install.packages("pacman")
pacman::p_load(psych, tidyverse)
data(sat.act)
df_beispiel <-as_tibble(sat.act)
```

## Hilfe-Menü und Dokumentation

Für jede Funktion in einem geladenen Paket können Sie einfach `? ` vor den Funktionsnamen schreiben, um das Hilfemenü bzw. ihre Dokumentation aufzurufen. Dies hilft Ihnen, den Zweck der Funktion, ihre Argumente und Ausgaben zu verstehen.
Sie können auch auf den Namen der Funktion klicken (an beliebiger Stelle im Namen) und "F1" drücken.

```{r}
#| eval: false
?head
head(df_beispiel)

```

## Struktur von Funktionen

Fast alles in R  geschieht mittels Funktionen. Funktionen nehmen Inputs und transformieren sie nach den Regeln der Funktion in Outputs. Die Funktion kann mittels Argumenten gesteuert werden.

- Funktionen sind i.d.R. benannt (hier `head`, `mean`) und mit Klammern `()` gekennzeichet.
  In der Klammer befinden sich die Argumente der Funktion, mit einem Komma getrennt.
  Argumente können benannt oder unbenannt sein. Werden Sie nicht benannt, folgt R der Reihenfolge der erwarteten Argumente, wie sie in der Funktionsdokumentation beschrieben sind.
- Unbenannt hier: `10` bei head()
- Benannt hier: `na.rm = TRUE` bei mean(), wobei na.rm der Name und TRUE der Inhalt des Argument sind.

```{r}
head(df_beispiel, 10)
mean(df_beispiel$age, na.rm = TRUE)
```



## Zuweisung / Assignment mittels  <-

- `<-` führt die Zuweisung (assignment) von Inhalten  der rechten Seite unter dem Namen auf der linken Seite aus. Wir nennen die zugewiesenen Inhalte, etwas verkürzt gesagt, Objekte oder Variablen.

```{r}
durchschnitt_von_SATV <- mean(df_beispiel$SATV, na.rm = TRUE)

```

In diesem Beispiel ist durchschnitt_von_SATV der Name des Objekts/Variable.

## Typen von Objekten

Die häufigsten Typen von Objekten/Variablen sind: 

- Vektor, numerisch
- Vektor, Character (Buchstaben)
- data frame (Datenframe, Tabelle)
- tibble - eine verbesserte Variante eines data frame
- list (Liste)

Einen Vektor erstellt man mit der `c()` Funktionen

```{r}
vektor_numerisch <- c(1,2,3,4,5)
vektor_character <- c("Zytglogge", "Hirschengraben", "Bahnhof", "Bundesplatz", "Viktoriaplatz")
datenframe <- data.frame(Nummer = vektor_numerisch, Ort = vektor_character)
datenframe

tibble_beispiel <- tibble(Nummer = vektor_numerisch, Ort = vektor_character)
tibble_beispiel
```

Wie wir sehen, sind Datenframes i.d.R. aus Vektoren der gleichen Länge, aber oft unterschiedlichen Typs, aufgebaut.

```{r}
beispielliste <- list(x1 = vektor_numerisch, x2 = vektor_character, c(6,7,8), x3 = tibble_beispiel, "test")
beispielliste
```

Listen sind extrem flexibel, was ihre Anhalte angeht - wir können quasi alles reinpacken. Das macht sie teils aber auch schwer zu durchschauen. Wenn möglich empfiehlt es sich, mit tibble/data.frame zu arbeiten; dies spart kognitive Ressourcen.

## Die "Pipe" (%>% oder |>) 

`%>%` ist der ursprüngliche Pipe-Operator, der für das Paket {magrittr} entwickelt wurde und in den gesamten tidyverse-Paketen verwendet wird. Er ist etwas langsamer, aber auch flexibler.
`|>` ist eine neuere Version des Pipe-Operators, die in Base-R integriert wurde. Sie ist etwas schneller, aber weniger flexibel.

Die Ausgabe des linken Teils der Pipe wird als Eingabe für den rechten Teil der Pipe verwendet, in der Regel als erstes Argument oder als Datenargument.
Effektiv transportiert die Pipe den Inhalt von links nach rechts weiter.
Schreiben lässt sich die Pipe mit den Tasten Ctrl + Shift + M (unter Windows; unter Mac Cmd + Shift + M?).

```{r}
# use a function without the pipe
example_without_pipe <- select(df_beispiel, gender, ACT)

# use a function with the pipe. 
example_with_pipe <- df_beispiel |> 
  select(gender, ACT)


example_without_pipe
example_with_pipe

# check they produce identical results
identical(example_without_pipe, example_with_pipe)

```

### Warum lohnt es sich, die Pipe zu nutzen?

Der Pipe-Operator ermöglicht es uns, Code zu schreiben, der von oben nach unten gelesen wird und einer Abfolge von Schritten folgt – so, wie Menschen Schritte organisieren und beschreiben. Ohne den Pipe-Operator wird der Code von innen nach aussen geschrieben, auf eine Weise, die der Computer versteht, aber für Menschen weniger intuitiv ist.
Die Unterscheide in der Lesbarkeit zeigen sich vor allem bei komplexeren, verketteten Funktionen.

Wir verwenden im Folgenden einen Datenframe, wählen mit select() Spalten aus, und erstellen ihre Mittelwerte mit colMeans().
Ohne Pipe lesen wir von innen nach aussen: select(...), dann colMeans(...); mit Pipe lesen und schreiben wir: Objekt - select() - colMeans(), was einfacher nachzuvollziehen ist. Jede Funktion macht etwas, die Pipe gibt jeweils den transformierten Inhalt weiter an die nächste Funktion.

```{r}
# use a function without the pipe
example_without_pipe <- colMeans(select(df_beispiel, SATV, SATQ), na.rm = TRUE)

example_without_pipe

# use a function with the pipe. 
example_with_pipe <- df_beispiel |> 
  select(SATV, SATQ) |> 
  colMeans(na.rm = TRUE)

# check they produce identical results
identical(example_without_pipe, example_with_pipe)
```

## Spaltennamen anzeigen

Die meiste Zeit verbringen wir mit Data Frames - effektiv Tabellen.
Wie können wir herausfinden, welche Variablen sich in einem Data Frame befinden? Wir können den Data Frame anzeigen, aber es kann auch hilfreich sein, ihn auszugeben. Zu wissen, welche Variablen vorhanden sind, ist einer der ersten Schritte, um mit den Daten zu arbeiten.

```{r}

# print all column names
colnames(df_beispiel)
# print all column names as a vector using the pipe
df_beispiel |> 
  colnames()

```

## Spalten umbenennen - rename()

Oft sind die Variablennamen nicht intuitiv. Ein früher Schritt bei jeder Datenaufbereitung ist es, sie mithilfe der Funktion `rename()` intuitiver zu gestalten. Als Argumente schreiben wir jeweils `neuer_name = alter_name`.

```{r}

df_beispiel_renamed <- df_beispiel |> 
  rename(Alter = age,
         Bildung = education) 
```

## Auswahl und Extraktion

Es gibt verschieden Möglichkeiten, Inhalte aus Variablen auszuwählen und zu extrahieren:

- select() / |> slice() / pluck()
- [] 
- $

Im ersten Beispiel wollen wir die Variable x aus unserem Dataframe df_beispiel auswählen.

```{r}
df_beispiel |> select(ACT) # select mit pipe
df_beispiel[,"ACT"] # []
df_beispiel$ACT # $ 
```

Wie wir sehen, behalten `|>` und `[]` die Struktur des Inputs (ein Datenframe) standardmässig bei (ihr Output ist identisch), während `$` die Struktur "fallen lässt" und eine simplere Struktur wählt (Vektor statt Datenframe). Entsprechend ist der Output auch anders.

Im zweiten Beispiel wollen wir die Variablen x und y und die ersten zwei Zeilen aus unserem Dataframe df_beispiel auswählen. 
Nach dem "tidy" Verfahren wählen wir dafür Datenframe |> select() |> slice().
Nach dem "klassischen" Verfahren wählen wir in `[]` zuerst die Zeilen, dann die Spalten aus. Die Spalten müssen wir hier als richtigen Vektor eingeben, d.h. mittels `c()` "x"und "y" (in Anführungszeichen) angeben.

```{r}
df_beispiel |> select(SATV, SATQ) |> slice(1:2)
df_beispiel[1:2,c("SATV", "SATQ")]
c(df_beispiel$SATV[1:2], df_beispiel$SATQ[1:2])
```

Listen sind etwas komplizierter. Hier wird analog zu `select()` `pluck()` verwendet.

```{r}
beispielliste <- list(x1 = vektor_numerisch, x2 = vektor_character, c(6,7,8), x3 = tibble_beispiel, "test")
# tidy
beispielliste |> pluck(2)
beispielliste |> pluck("x2")

# [] und [[]]
beispielliste[2]

beispielliste[[2]]

# $ - geht nur mit benannten Listenelementen
beispielliste$x2
```

### Auswahl von Spalten / Variablen mittels Helfern


Beim Data Wrangling bearbeiten wir häufig **Gruppen von Variablen / Spalten**. Damit wir nicht immer jede einzelne Variable ausschreiben müssen, gibt es verschiedene Methoden. Hilfreich sind vor allem die sogenannten "tidyselect" Helferfunktionen. Diese können wir in `select()`, aber auch vielen anderen Funktionen verwenden, bei der wir Spalten aus einem Datensatz ansteuern.

Die häufigsten Helfer sind `:`, `c()`, `starts_with()`, `ends_with()`, `contains()`, `all_of()`, `num_range()`.

```{r}
names(df_beispiel)
df_beispiel |> select(age:gender)
df_beispiel |> select(c(age,gender))
df_beispiel |> select(starts_with("S"))
df_beispiel |> select(ends_with("V"))
df_beispiel |> select(contains("SAT"))

meine_variablen <- c("SATV", "SATQ", "gender")
df_beispiel |> select(all_of(meine_variablen))
```

Wir können auch mit logischen Operatoren arbeiten und diese verketten. Zu logischen Operatoren siehe auch: [Einführung in R, Kapitel 2.1.2](https://methodenlehre.github.io/einfuehrung-in-R/chapters/02-R-language.html#logische-operatoren-und-funktionen).

```{r}
data(bfi)  
names(bfi) #Big Five Items, OCEAN mit je 5 Items sowie gender, education und age

# bfi von normalen data.frame zu tibble upgraden
bfi <- as_tibble(bfi)

bfi |> select(starts_with("E")) |> head() # auch education dabei
bfi |> select(starts_with("E") & !all_of("education")) |> head() # nur die Extraversion Items, kein education
# oder eleganter mit num_range()
bfi |> select(num_range("E", 1:5)) |> head() # nur die Extraversion Items

bfi |> select(starts_with("E"), starts_with("C")) |> head() # "," wird als einschliessendes oder (OR) gelesen
```

## Spalten ändern und neue Anlegen - mutate()

`mutate()` wird genutzt, um neue Spalten anzulegen oder die Inhalte bestehender Spalten zu ändern. is used to create new columns or to change the contents of existing ones.
Oft verändern wir Variablen bei einer Analyse. Typisch ist etwa die Zentrierung von Variablen auf den Mittelwert der Stichprobe (grand mean; damit bekommen die Variablen einen Mittelwert von 0) oder die z-Standardisierung (Variablen bekommen einen Mittelwert von 0 **und** eine Standardabweichung von 1).

```{r}
df_beispiel <- df_beispiel |> mutate(ACT_c = scale(ACT, center = TRUE, scale = FALSE),
                                     ACT_z = scale(ACT, center = TRUE, scale = TRUE))
df_beispiel
```


## Zeilen filtern

Neben der Mutation/Transformation von Spalten ist das Filtern von Zeilen ein typisches Anliegen bei der Datenaufbereitung. Dies geht mittels `filter()`.
Du kannst den logischen Test für das Filtern auf verschiedene Arten angeben, einschließlich Gleichheit (`==`), Negation (`!=`) oder Zugehörigkeit (`%in%`). Es ist oft besser zu definieren, was du möchtest (mithilfe von Gleichheit oder Zugehörigkeit), anstatt zu definieren, was du nicht möchtest (Negation), da Negationen weniger robust gegenüber neuen Daten mit ungewöhnlichen Werten sind, die du beim Schreiben des Codes nicht bedacht hast. Zum Beispiel könntest du `gender != 2` angeben, aber das würde non binary nicht erfassen.

```{r}
df_beispiel_w <- df_beispiel |> filter(gender == 2)

```

Du kannst auch mehrere Kriterien in deinem Filteraufruf verwenden, bei denen beide erfüllt sein müssen (x & y) oder bei denen eines von beiden erfüllt sein muss (x | y).

```{r}

df_beispiel_w_and_edu <- df_beispiel |> filter(gender == 2 & education > 2)
df_beispiel_w_or_edu <- df_beispiel |> filter(gender == 2 | education > 2)


# note that these provide different results - make sure you understand why
identical(df_beispiel_w_and_edu, df_beispiel_w_or_edu)

```

## Übung Data Wrangling

1) Wähle zunächst die folgenden Variablen aus: education, SATQ. 
2) Erstelle eine neue Variable, in der die SATQ zentriert wird und nenne sie "SATQ_c". Transformiere education in einen Faktor (`as.factor()`).
3) Wähle alle Personen mit High School-Abschluss (Faktor-Level 1) aus.

Führe zunächst jeden Schritt separat und sequentiell aus.
Verknüpfe dann alle Funktionen/Schritte mittels mehrerer Pipes. Das führt dazu, dass weniger Objekte in deiner Umgebung existieren und somit weniger Verwirrung oder Fehlerpotenzial entsteht.
Genereller Tipp: Wir lösen Programmierprobleme leichter, indem wir sie in kleinere Aufgaben und Probleme zerlegen, diese jeweils einzeln zum Laufen bringen und sie dann wieder zusammenfügen. Wenn man nur das Endprodukt sieht, könnte man leicht denken, der/die Autor:in hätte den Code genau so geschrieben, wie er aussieht. Dabei hat er/sie oft viel ausführlichere Codeabschnitte geschrieben und diese anschließend zusammengeführt.

```{r}
# auswählen
 df_auswahl <- df_beispiel
# neue variable erstellen
df_neuevariable <- df_auswahl
# filtern
df_filter <- df_neuevariable 

# jetzt alles zusammen
df_kombiniert <- df_beispiel 


```

:::{.callout-tip collapse="true"}

### Lösung: Übung Data Wrangling

```{r}
# auswählen
df_auswahl <- df_beispiel |> select(education, SATQ)
# neue variable erstellen
df_neuevariable <- df_auswahl |> mutate(
  education = as.factor(education),
  SATQ_c = scale(SATQ, center = TRUE, scale = FALSE))
# filtern
df_filter <- df_neuevariable |> filter(education == 1)

# jetzt alles zusammen
df_kombiniert <- df_beispiel |> 
  select(education, SATQ) |> 
  mutate(
  education = as.factor(education),
  SATQ_c = scale(SATQ, center = TRUE, scale = FALSE)) |> 
  filter(education == 1)

# identical(df_filter, df_kombiniert) # check
```
:::




## Zusammenfassung über Zeilen

Es ist sehr häufig, dass wir Zusammenfassungen über Zeilen hinweg erstellen müssen. Zum Beispiel, um den Mittelwert und die Standardabweichung einer Spalte wie age zu berechnen. Das kann mit `summarize()` erledigt werden. Denk daran: `mutate()` erstellt neue Spalten oder ändert den Inhalt bestehender Spalten, ohne die Anzahl der Zeilen zu verändern. `summarize()` hingegen reduziert einen Datensatz auf eine einzelne Zeile.

```{r}
# mean
df_beispiel |> summarize(mean_age = mean(age, na.rm = TRUE))
# SD
df_beispiel |> 
  summarize(sd_age = sd(age, na.rm = TRUE))

# mean and SD with rounding, illustrating how multiple summarizes can be done in one function call
df_beispiel |> 
  summarize(mean_age = mean(age, na.rm = TRUE),
            mean_age = round(mean_age, digits = 2),
            sd_age = sd(age, na.rm = TRUE),
            sd_age = round(sd_age, digits = 2))

```

### `group_by()`

Oft wollen wir einen Datensatz jedoch nicht auf eine einzelne Zeile reduzieren bzw. den gesamten Datensatz zusammenfassen, sondern eine Zusammenfassung für jede (Unter-)Gruppe erstellen. 
Dies ist hilfreich, insbesondere da wir im Seminar mit Tagen verschachtelt in Personen arbeiten werden.

```{r}
# illustrate use of group_by() and summarize()
df_beispiel |> 
  group_by(education) |> 
  summarize(ACT_c = mean(ACT_z, na.rm = TRUE))

```


### Komplexere Zusammenfassungen

Ähnlich wie bei `mutate()` kann auch die Operation für `summarize()` komplexer sein, z. B. das Finden des Mittelwerts einer logischen Operation (d.h., logische Operatoren nutzend, wie &, <, >, | etc.) , um einen Anteil zu berechnen.
Im Folgenden berechnen wir den Anteil von niedrigen SAT Verbal Scores (hier definiert als -1 Standardabweichungen oder niedriger) gruppiert nach Bildung.

```{r}

df_beispiel |> 
  mutate(SATV_z = scale(SATV)) |> 
  group_by(education) |>
  summarize(SATV_unterdurchschnitt = mean(SATV_z < -1, na.rm = TRUE))
```

Mit `across()` kannst du Zusammenfassungen (oder auch Änderungen mit mutate()) über mehrere Spalten hinweg auf dieselbe Weise durchführen. Wir werden hier nicht alle Möglichkeiten oder Details zu across() behandeln, aber es ist wichtig zu wissen, dass es möglich ist. Zum Beispiel:

```{r}
df_beispiel |> 
  # ... calculate the mean of every numeric column in the dataset ...
  summarise(across(where(is.numeric), mean, na.rm = TRUE)) |> 
  # ... and then round every column to one decimal place
  mutate(across(everything(), round, digits = 2))

```

## Übung `summarize()`

Berechne min, max, mean, und SD aller Antworten auf dem selbstberichteten SAT Verbal Score (SATV).

```{r}

# data_selfreport_tidy

df_beispiel |> 
  summarize()

```

Für die zweiten Übung arbeiten wir mit dem Datensatz BFI, der Big Five Items beinhaltet (s. Dokumentation des Datensatzes).
Berechne, getrennt nach Gender, Mittelwert un SD von C1 (ein Gewissenhaftigkeit-Item).

```{r}
data(bfi)
head(bfi)


```

:::{.callout-tip collapse="true"}

### Lösung: Übung `summarize()`

```{r}
df_beispiel |> 
  summarize(min_satv = min(SATV, na.rm = TRUE),
            max_satv = max(SATV, na.rm = TRUE),
            mean_satv = mean(SATV, na.rm = TRUE),
            sd_satv = sd(SATV, na.rm = TRUE))

bfi |> group_by(gender) |> 
  summarize(C1_na = sd(C1, na.rm = TRUE),
            C1_mean = mean(C1, na.rm = TRUE))
```

:::

## Kontrolliere deinen Lernfortschritt

Was ist der Unterschied zwischen `mutate()` und `summarize()`? Bekomme ich dasselbe Ergebnis, wenn ich die falsche Funktion verwende? Zum Beispiel: `mutate(mean_age = mean(age, na.rm = TRUE))` vs.`summarize(mean_age = mean(age, na.rm = TRUE))`.

## Daten auf Festplatte schreiben

Am Ende von  Data Wrangling Prozessen ist es sinnvoll, die Ergebnisse festzuhalten, damit wir sie nicht verlieren, bzw. beim nächsten Mal nicht alles von vorne ausführen müssen.

```{r}
df_beispiel_standardisiert <- df_beispiel |> mutate(across(c("SATV", "SATQ", "ACT"),
                                                           scale))

save(df_beispiel_standardisiert, file =  "../data/df_beispiel_standardisiert.RData")

```


