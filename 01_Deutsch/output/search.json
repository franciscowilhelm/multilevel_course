[
  {
    "objectID": "01 Data Preparation Item Level.html",
    "href": "01 Data Preparation Item Level.html",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "",
    "text": "2.1 Pakete installieren und laden\nif (!require(\"pacman\")) install.packages(\"pacman\")\n\nLoading required package: pacman\n\npacman::p_load(haven, psych,\n               sjmisc, sjPlot, writexl,\n               tidyverse, multilevelTools)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "01 Data Preparation Item Level.html#daten-einlesen",
    "href": "01 Data Preparation Item Level.html#daten-einlesen",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "2.2 Daten einlesen",
    "text": "2.2 Daten einlesen\n\nload(\"../data/df_cfa_wide.RData\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "01 Data Preparation Item Level.html#daten-ansehen",
    "href": "01 Data Preparation Item Level.html#daten-ansehen",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "2.3 Daten ansehen",
    "text": "2.3 Daten ansehen\nDer Datensatz hat 131 (!) Spalten (ncol()) und 100 Zeilen (nrow()) (eine pro Person). Aufgrund des breiten Datenformats gibt es so viele Spalten, da jeder Tag (1-10 Tage) von jeder Variable seine eigene Spalte bekommt. Wie wir mit names() sehen, gibt es die Variablen id für die Personidentifikation (jede Person hat ihre eigene Nummer), a1-a5, b1-b5, und c1-c3. w,a,b und c bilden jeweils eine Skala mit 5 bzw. bei c 3 Indikatoren. Mit head() können wir einen Blick in die Daten werfen.\n\nncol(df_cfa_wide)\n\n[1] 131\n\nnrow(df_cfa_wide)\n\n[1] 100\n\nnames(df_cfa_wide)\n\n  [1] \"id\"     \"a1_t1\"  \"a1_t2\"  \"a1_t3\"  \"a1_t4\"  \"a1_t5\"  \"a1_t6\"  \"a1_t7\" \n  [9] \"a1_t8\"  \"a1_t9\"  \"a1_t10\" \"a2_t1\"  \"a2_t2\"  \"a2_t3\"  \"a2_t4\"  \"a2_t5\" \n [17] \"a2_t6\"  \"a2_t7\"  \"a2_t8\"  \"a2_t9\"  \"a2_t10\" \"a3_t1\"  \"a3_t2\"  \"a3_t3\" \n [25] \"a3_t4\"  \"a3_t5\"  \"a3_t6\"  \"a3_t7\"  \"a3_t8\"  \"a3_t9\"  \"a3_t10\" \"a4_t1\" \n [33] \"a4_t2\"  \"a4_t3\"  \"a4_t4\"  \"a4_t5\"  \"a4_t6\"  \"a4_t7\"  \"a4_t8\"  \"a4_t9\" \n [41] \"a4_t10\" \"a5_t1\"  \"a5_t2\"  \"a5_t3\"  \"a5_t4\"  \"a5_t5\"  \"a5_t6\"  \"a5_t7\" \n [49] \"a5_t8\"  \"a5_t9\"  \"a5_t10\" \"b1_t1\"  \"b1_t2\"  \"b1_t3\"  \"b1_t4\"  \"b1_t5\" \n [57] \"b1_t6\"  \"b1_t7\"  \"b1_t8\"  \"b1_t9\"  \"b1_t10\" \"b2_t1\"  \"b2_t2\"  \"b2_t3\" \n [65] \"b2_t4\"  \"b2_t5\"  \"b2_t6\"  \"b2_t7\"  \"b2_t8\"  \"b2_t9\"  \"b2_t10\" \"b3_t1\" \n [73] \"b3_t2\"  \"b3_t3\"  \"b3_t4\"  \"b3_t5\"  \"b3_t6\"  \"b3_t7\"  \"b3_t8\"  \"b3_t9\" \n [81] \"b3_t10\" \"b4_t1\"  \"b4_t2\"  \"b4_t3\"  \"b4_t4\"  \"b4_t5\"  \"b4_t6\"  \"b4_t7\" \n [89] \"b4_t8\"  \"b4_t9\"  \"b4_t10\" \"b5_t1\"  \"b5_t2\"  \"b5_t3\"  \"b5_t4\"  \"b5_t5\" \n [97] \"b5_t6\"  \"b5_t7\"  \"b5_t8\"  \"b5_t9\"  \"b5_t10\" \"c1_t1\"  \"c1_t2\"  \"c1_t3\" \n[105] \"c1_t4\"  \"c1_t5\"  \"c1_t6\"  \"c1_t7\"  \"c1_t8\"  \"c1_t9\"  \"c1_t10\" \"c2_t1\" \n[113] \"c2_t2\"  \"c2_t3\"  \"c2_t4\"  \"c2_t5\"  \"c2_t6\"  \"c2_t7\"  \"c2_t8\"  \"c2_t9\" \n[121] \"c2_t10\" \"c3_t1\"  \"c3_t2\"  \"c3_t3\"  \"c3_t4\"  \"c3_t5\"  \"c3_t6\"  \"c3_t7\" \n[129] \"c3_t8\"  \"c3_t9\"  \"c3_t10\"\n\nhead(df_cfa_wide)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\na1_t1\na1_t2\na1_t3\na1_t4\na1_t5\na1_t6\na1_t7\na1_t8\na1_t9\na1_t10\na2_t1\na2_t2\na2_t3\na2_t4\na2_t5\na2_t6\na2_t7\na2_t8\na2_t9\na2_t10\na3_t1\na3_t2\na3_t3\na3_t4\na3_t5\na3_t6\na3_t7\na3_t8\na3_t9\na3_t10\na4_t1\na4_t2\na4_t3\na4_t4\na4_t5\na4_t6\na4_t7\na4_t8\na4_t9\na4_t10\na5_t1\na5_t2\na5_t3\na5_t4\na5_t5\na5_t6\na5_t7\na5_t8\na5_t9\na5_t10\nb1_t1\nb1_t2\nb1_t3\nb1_t4\nb1_t5\nb1_t6\nb1_t7\nb1_t8\nb1_t9\nb1_t10\nb2_t1\nb2_t2\nb2_t3\nb2_t4\nb2_t5\nb2_t6\nb2_t7\nb2_t8\nb2_t9\nb2_t10\nb3_t1\nb3_t2\nb3_t3\nb3_t4\nb3_t5\nb3_t6\nb3_t7\nb3_t8\nb3_t9\nb3_t10\nb4_t1\nb4_t2\nb4_t3\nb4_t4\nb4_t5\nb4_t6\nb4_t7\nb4_t8\nb4_t9\nb4_t10\nb5_t1\nb5_t2\nb5_t3\nb5_t4\nb5_t5\nb5_t6\nb5_t7\nb5_t8\nb5_t9\nb5_t10\nc1_t1\nc1_t2\nc1_t3\nc1_t4\nc1_t5\nc1_t6\nc1_t7\nc1_t8\nc1_t9\nc1_t10\nc2_t1\nc2_t2\nc2_t3\nc2_t4\nc2_t5\nc2_t6\nc2_t7\nc2_t8\nc2_t9\nc2_t10\nc3_t1\nc3_t2\nc3_t3\nc3_t4\nc3_t5\nc3_t6\nc3_t7\nc3_t8\nc3_t9\nc3_t10\n\n\n\n\n1\n3.336252\n2.149828\n1.613518\n3.351085\n3.320900\n4.173775\n3.653771\n1.926106\n5.621661\n4.948758\n3.380463\n5.110309\n3.004133\n3.852294\n3.694431\n5.658948\n4.973751\n4.999227\n5.123906\n6.090460\n3.223528\n5.678413\n2.503233\n4.972103\n4.703663\n3.273027\n3.187604\n3.664482\n5.464105\n3.765162\n4.399347\n2.765556\n1.898476\n2.612551\n3.476859\n4.192700\n2.856953\n4.112356\n4.579488\n3.134414\n3.542602\n2.387270\n2.807670\n3.233779\n4.210036\n3.565438\n3.293944\n3.909548\n5.635526\n4.620410\n3.370896\n2.486919\n0.991958\n2.248097\n1.953658\n1.544111\n2.103968\n1.763424\n3.087552\n1.618470\n1.697640\n0.952220\n-0.685685\n0.004118\n0.675750\n-0.373186\n1.938302\n0.447036\n3.860272\n1.211009\n0.584167\n2.101517\n0.003147\n0.711264\n0.921623\n1.303905\n1.201749\n0.899882\n1.797242\n0.734580\n1.576649\n0.331000\n-0.517730\n2.185949\n0.284884\n1.687402\n1.388842\n0.160632\n2.144261\n1.205662\n2.847195\n2.552073\n1.955846\n2.028044\n2.361978\n2.539967\n2.125510\n1.206909\n4.844395\n4.320178\n4.325797\n3.364003\n2.582169\n2.918614\n2.829237\n4.141474\n2.711044\n4.787052\n4.594232\n2.511473\n1.030847\n5.711729\n2.659834\n3.163276\n3.910432\n5.234767\n5.515933\n5.206142\n4.431722\n4.953160\n3.822098\n3.613752\n2.155132\n2.463234\n2.739723\n3.409232\n3.488225\n1.453246\n4.117747\n3.745528\n\n\n2\n3.707018\n2.377418\n1.854018\n4.632683\n2.479164\n2.234632\n4.485121\n4.011457\n2.427658\n2.600831\n3.996684\n3.074568\n3.716554\n3.796472\n3.108752\n2.922636\n4.654462\n4.431057\n3.497468\n4.130753\n0.810690\n2.874266\n3.669414\n2.478778\n2.406462\n2.515853\n3.129976\n3.718570\n2.542158\n2.606330\n3.515638\n4.128262\n3.577047\n4.258751\n4.238509\n3.267878\n4.119021\n2.712250\n2.601381\n5.293957\n2.907960\n2.834590\n3.827659\n5.278379\n3.967381\n4.134327\n5.923659\n4.251589\n3.292468\n3.639972\n2.323243\n2.042416\n2.601619\n0.235322\n1.990456\n3.388960\n0.995331\n3.325457\n2.207927\n0.221311\n2.990608\n1.476811\n2.349784\n3.097647\n2.047705\n2.722032\n3.112804\n1.368452\n2.251611\n1.587188\n1.013232\n2.926646\n2.095343\n2.858416\n3.019904\n1.726097\n3.515165\n1.348090\n1.890474\n2.311975\n1.190393\n2.184150\n1.549624\n0.452129\n1.513757\n1.432716\n1.950500\n2.007023\n0.249291\n-0.504312\n2.010378\n4.018477\n3.410691\n3.063017\n3.897992\n2.469268\n2.906900\n2.914951\n0.608605\n2.239330\n2.576924\n1.208644\n2.606353\n3.886131\n3.856964\n3.332155\n0.597512\n2.731819\n2.110466\n2.687502\n-1.710033\n-0.670529\n-0.330814\n-0.601643\n-0.251286\n0.439045\n0.734464\n0.066167\n-0.849054\n-0.757472\n0.351828\n0.095795\n0.897598\n2.615174\n0.455632\n2.211615\n-0.235576\n0.389909\n-0.160126\n1.833746\n\n\n3\n5.177071\n-0.128053\n2.797632\n0.303081\n4.314881\n2.337009\n3.575595\n1.818855\n-0.306364\n1.614770\n2.958702\n2.735971\n2.978813\n4.107814\n4.661105\n3.033462\n2.912859\n3.754350\n1.986925\n2.453018\n5.346752\n4.501127\n4.825683\n4.908117\n5.724673\n5.153263\n4.766531\n5.198076\n1.471673\n3.829653\n4.772178\n2.755005\n4.204091\n2.631057\n4.744125\n3.983818\n2.875329\n3.684137\n1.252706\n1.649124\n5.782683\n4.648184\n3.675335\n5.918703\n5.729757\n5.027148\n4.950459\n5.555384\n2.874046\n2.074345\n3.034341\n5.163917\n1.010752\n1.666880\n1.295466\n1.477020\n1.009490\n1.175458\n1.284057\n3.434230\n4.263902\n3.116927\n2.598624\n2.281766\n4.053404\n2.417430\n1.154442\n2.357182\n-0.103946\n2.599341\n3.981286\n1.433954\n2.329805\n3.582351\n2.509821\n-0.341738\n1.558373\n2.687843\n1.337345\n3.732375\n3.988386\n2.509786\n2.058585\n3.740040\n3.256067\n3.500106\n0.782067\n3.601466\n0.922850\n4.635307\n3.024556\n1.150083\n3.052157\n3.163149\n2.655710\n0.093386\n-0.073910\n2.227515\n1.712568\n2.898763\n2.820979\n1.664689\n2.688626\n2.657114\n1.381627\n2.417342\n1.443182\n2.776111\n2.248535\n2.684371\n1.748407\n2.869058\n1.052509\n3.174517\n0.118054\n0.789280\n2.679447\n0.740977\n1.135104\n0.980832\n1.537544\n2.950929\n1.429920\n2.534687\n3.792833\n1.161559\n0.105494\n2.915895\n1.714465\n2.815621\n\n\n4\n4.705740\n3.597286\n2.948942\n2.098839\n2.783596\n4.420878\n1.358347\n3.848268\n3.714631\n2.284839\n4.038396\n4.916627\n2.739167\n3.144930\n2.224095\n2.968036\n2.365223\n3.665594\n2.585768\n3.208773\n5.110747\n4.059650\n3.327694\n4.411642\n3.937307\n5.154507\n3.126869\n4.554551\n3.766840\n4.039097\n5.965881\n5.027371\n4.130869\n5.175652\n4.037358\n5.245027\n3.205133\n3.004498\n6.786242\n4.499281\n3.958800\n3.838211\n3.211688\n2.475119\n2.191741\n2.052676\n2.687921\n2.079803\n3.929772\n1.621818\n3.621642\n3.197431\n2.838179\n1.280215\n1.746913\n2.267367\n1.597599\n2.441468\n1.211542\n4.138991\n1.342898\n1.821522\n1.688056\n2.463308\n2.030884\n0.815056\n0.953910\n1.729489\n1.332197\n3.093290\n2.400477\n2.873127\n1.997939\n1.791812\n-0.960833\n0.893946\n0.647417\n1.110916\n1.748169\n2.121472\n1.952886\n2.904973\n0.878772\n1.269630\n0.835469\n-1.070358\n-0.541286\n1.063053\n1.485312\n3.607293\n4.027168\n3.804839\n2.787383\n2.807136\n2.706166\n2.527843\n1.675010\n2.839636\n3.124758\n4.327591\n-0.571315\n2.285224\n1.057377\n1.803651\n0.992669\n1.980404\n3.310448\n1.662047\n2.537811\n1.245361\n1.490392\n0.456182\n1.328019\n1.697168\n0.693560\n0.252673\n2.728439\n1.103803\n1.332902\n0.163830\n0.043749\n0.744745\n0.204956\n-0.370906\n-1.022587\n-0.403501\n1.095947\n0.274934\n1.170815\n-1.658070\n\n\n5\n3.949976\n3.330208\n5.413867\n3.719810\n5.798861\n3.088709\n4.012137\n5.875070\n3.181456\n4.931577\n3.317796\n5.810359\n5.343310\n3.928448\n3.798973\n3.932334\n2.986737\n6.926680\n4.932457\n6.716081\n3.673230\n3.927261\n4.515421\n3.791699\n4.846026\n3.398835\n2.273474\n4.371252\n1.762524\n3.275910\n5.841838\n8.072948\n6.721671\n6.987111\n5.944237\n4.489158\n4.921571\n7.603350\n6.165390\n6.983403\n3.389670\n5.893949\n3.749111\n4.411794\n2.873486\n2.611568\n1.286889\n4.646997\n3.107310\n4.433750\n1.701253\n0.278520\n3.249563\n2.181162\n3.107517\n0.092424\n1.985821\n1.740418\n3.187945\n2.244310\n3.361174\n3.497546\n3.372372\n2.430237\n5.397523\n3.270945\n3.053623\n1.919141\n3.688502\n2.961518\n4.337413\n3.496237\n5.441549\n3.444545\n4.486709\n4.455020\n2.470650\n5.844872\n4.583409\n6.108861\n4.302733\n2.764837\n3.876676\n3.527337\n5.128605\n2.163503\n1.886539\n1.734753\n3.437857\n3.740089\n4.179862\n3.775715\n5.299768\n2.953386\n3.807893\n2.537854\n2.901724\n4.785203\n5.926126\n4.928503\n3.053878\n1.885364\n4.448834\n3.900540\n4.728735\n2.129385\n3.805631\n2.089345\n3.743529\n2.992289\n1.790360\n1.515488\n3.618075\n3.781413\n4.205560\n1.303834\n3.673459\n3.327604\n3.160806\n3.722098\n1.817841\n2.362278\n2.812572\n4.554119\n3.287976\n3.279677\n1.435943\n3.242930\n0.500366\n5.079764\n\n\n6\n2.274255\n2.290222\n1.376191\n2.173916\n2.099371\n3.312339\n2.172030\n2.595873\n2.289308\n1.580778\n2.787734\n2.067549\n2.180852\n3.302369\n1.863362\n3.760236\n2.294264\n2.135892\n1.550506\n2.432511\n3.703579\n2.047107\n3.065654\n1.978181\n2.963593\n2.955959\n3.468359\n4.343268\n3.525407\n3.837417\n4.151001\n0.835873\n1.884775\n2.608722\n3.012065\n2.776904\n2.578840\n3.399579\n3.577152\n3.039595\n1.512579\n0.621510\n1.092427\n1.911605\n1.368582\n2.511084\n0.839038\n3.272104\n1.121144\n1.740897\n2.996994\n-1.267884\n2.586945\n2.184757\n-0.124601\n2.601747\n1.747253\n2.520691\n4.051763\n2.738223\n1.022146\n-1.129770\n1.219736\n-0.032099\n2.843606\n-1.122089\n0.739502\n2.138073\n0.272516\n0.625661\n2.134281\n0.231331\n2.861858\n1.303966\n1.199804\n1.300905\n1.312581\n2.266003\n3.106999\n2.869239\n2.308207\n1.068449\n2.414964\n1.894137\n2.681821\n0.512435\n2.125864\n2.787195\n2.595406\n2.191860\n2.267998\n0.203488\n2.181351\n1.670791\n0.222494\n0.947280\n2.464313\n2.733245\n2.599860\n1.042442\n1.648781\n0.598068\n0.225724\n0.521410\n1.669001\n1.384766\n2.299040\n2.014711\n2.088084\n0.651604\n2.356883\n0.718648\n1.309239\n2.011107\n1.617811\n3.844703\n1.838274\n2.215482\n2.364317\n1.437971\n2.745956\n3.067538\n3.096565\n2.927631\n4.206480\n3.969140\n5.377585\n2.509150\n2.817378\n1.073844",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "01 Data Preparation Item Level.html#daten-transformieren-langformat",
    "href": "01 Data Preparation Item Level.html#daten-transformieren-langformat",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "2.4 Daten transformieren: Langformat",
    "text": "2.4 Daten transformieren: Langformat\nAls erstes transformieren wir die Daten vom Breit- ins Langformat, so dass jede Messung (Tag 1-Tag 10) eine eigene Zeile bekommt. Diese Variable nennen wir “time”. Im ersten Schritt machen wir mit pivot_longer() den Datensatz seehr lang, es bekommt nämlich jede Messung von jeder Variable ihre eigenen Zeile. Wir machen den Datensatz dann im zweiten Schritt mit pivot_wider() wieder etwas breiter mit dem Ziel, eine Zeile pro Person und Tag zu bekommen, und jeweils eine Spalte pro Item.\nDie Funktionsweise von pivot_longer() und pivot_wider() ist in der Einführung zu R beschrieben.\n\ndf_cfa_superlong &lt;- df_cfa_wide |&gt; \n  pivot_longer(\n    cols = -id, # All columns except id\n    names_to = c(\"variable\", \"time\"),\n    names_sep = \"_t\"\n  ) \n\ndf_cfa_long &lt;- df_cfa_superlong |&gt; \n  pivot_wider(names_from = variable,\n              values_from = value) |&gt; \n  mutate(time = as.numeric(time)) # time ist eine Zahl von 1-10, wurde aber zuvor als Character-Vector abgespeichert",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "01 Data Preparation Item Level.html#daten-transformieren-skalenscores-erstellen",
    "href": "01 Data Preparation Item Level.html#daten-transformieren-skalenscores-erstellen",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "2.5 Daten transformieren: Skalenscores erstellen",
    "text": "2.5 Daten transformieren: Skalenscores erstellen\nAls nächstes können wir die Skalenscores erstellen.\n\ndf_cfa_long_scores &lt;- df_cfa_long |&gt; group_by(id, time) |&gt; \n  summarise(\n    a = rowMeans(across(starts_with(\"a\")), na.rm = TRUE),\n    b = rowMeans(across(starts_with(\"b\")), na.rm = TRUE),\n    c = rowMeans(across(starts_with(\"c\")), na.rm = TRUE),\n    .groups = \"drop\" # group_by() wieder aufheben für den finalen Datensatz\n  )\n\nWir verwenden eine simple Form der Skalenerstellung bei dem der Mittelwert aller vorhandenen Items einer Skala verwendet wird. (Best-practice ist es bei fehlenden Daten genau hinzuschauen und nur dann einen Skalenwert zu erstellen, wenn die Personen zu einen gewissen Prozentsatz aller Items eine Antwort geben (etwa 2/3). Eine solche Funktion könnten wir programmieren, lassen es aber für das Beispiel weg.)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "01 Data Preparation Item Level.html#daten-transformieren-zentrierung",
    "href": "01 Data Preparation Item Level.html#daten-transformieren-zentrierung",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "2.6 Daten transformieren: Zentrierung",
    "text": "2.6 Daten transformieren: Zentrierung\nFür die spätere Verwendung zerlegen wir die Rohvariablen mittels person-mean Zentrierung. Wir zentrieren wir die Skalenvariablen, die täglich gemessen werden (aber nicht Baseline-Variablen), mittels de_mean(). de_mean() nimmt als Argumente (a) mit Komma getrennte Namen der Variablen, die wir zentrieren wollen (mehrere auf einmal ist möglich), (b) mittels grp = Argument die identifizierende Variable für die Gruppenzugehörigkeit in Anführungszeichen (\"id\".\n\ndf_cfa_long_scores &lt;- df_cfa_long_scores |&gt; \n  de_mean(a,b, c, grp = \"id\")\nhead(df_cfa_long_scores)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ntime\na\nb\nc\na_dm\nb_dm\nc_dm\na_gm\nb_gm\nc_gm\n\n\n\n\n1\n1\n3.576438\n2.0153094\n3.059581\n-0.2566380\n0.4476044\n-0.5267811\n3.833076\n1.567705\n3.586362\n\n\n1\n2\n3.618275\n1.6847458\n4.229828\n-0.2148012\n0.1170408\n0.6434662\n3.833076\n1.567705\n3.586362\n\n\n1\n3\n2.365406\n0.3495072\n2.465712\n-1.4676704\n-1.2181978\n-1.1206501\n3.833076\n1.567705\n3.586362\n\n\n1\n4\n3.604362\n1.4354944\n2.848375\n-0.2287140\n-0.1322106\n-0.7379871\n3.833076\n1.567705\n3.586362\n\n\n1\n5\n3.881178\n1.2395786\n3.159797\n0.0481014\n-0.3281264\n-0.4265645\n3.833076\n1.567705\n3.586362\n\n\n1\n6\n4.172778\n1.3404398\n4.261824\n0.3397012\n-0.2272652\n0.6754625\n3.833076\n1.567705\n3.586362\n\n\n\n\n\n\nAls Ergebnis erhalten wir die zusätzlichen Variablen a, b, c jeweils mit “_dm” und “_gm”. Was verbirgt sich dahinter? Wir haben einen Datensatz mit den unzentrierten / Rohvariablen der Skalen (ohne Suffix), den zentrierten Variablen (Suffix _dm) und den Mittelwerten der Personen (Suffix _gm), den wir zur weiteren Verwendung auch abspeichern.\nDamit ist die Transformation der Daten abgeschlossen! Wir können die Datensätze - “df_cfa_long” für die Items und “df_cfa_long_scores” für die Skalen nun abspeichern.\n\nsave(df_cfa_long, df_cfa_long_scores, file = \"../data/df_cfa_long.RData\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "01 Data Preparation Item Level.html#überprüfe-dein-verständnis",
    "href": "01 Data Preparation Item Level.html#überprüfe-dein-verständnis",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "2.7 Überprüfe dein Verständnis",
    "text": "2.7 Überprüfe dein Verständnis\n\nbeispiel_zentrierung &lt;- df_cfa_long_scores |&gt; \n  filter(id == 1) |&gt; \n  select(id, time, a, a_dm, a_gm)\n\nbeispiel_zentrierung\n\n\n\n\n\nid\ntime\na\na_dm\na_gm\n\n\n\n\n1\n1\n3.576438\n-0.2566380\n3.833076\n\n\n1\n2\n3.618275\n-0.2148012\n3.833076\n\n\n1\n3\n2.365406\n-1.4676704\n3.833076\n\n\n1\n4\n3.604362\n-0.2287140\n3.833076\n\n\n1\n5\n3.881178\n0.0481014\n3.833076\n\n\n1\n6\n4.172778\n0.3397012\n3.833076\n\n\n1\n7\n3.593205\n-0.2398718\n3.833076\n\n\n1\n8\n3.722344\n-0.1107326\n3.833076\n\n\n1\n9\n5.284937\n1.4518608\n3.833076\n\n\n1\n10\n4.511841\n0.6787644\n3.833076\n\n\n\n\n\n\nWarum ist der Wert, den Person 1 in “a_gm” hat, in jeder Zeile gleich, nicht aber bei “a_dm” und “a”? Wie müsste man a transformieren, damit man auf a_dm kommt? Denke an die mathematischen Operationen die du in mutate() eingeben müsstest, wie +, -, /, mean().\n\n\n\n\n\n\nLösung\n\n\n\nDie Variable a ist die Rohvariable, die den gemessenen Wert auf der Skala an jedem Tag angibt. Variablen mit “_gm” und “_dm” werden von sjmisc::de_mean() erstellt und stehen für den Mittelwert der Person über alle Tage hinweg. Variablen mit “_dm” stehen für die täglichen Abweichungen vom Mittelwert der Person. “a_dm” ergibt sich aus: \\(a = a - a\\_gm\\). Wir können dies auch in R replizieren mit:\n\nbeispiel_zentrierung |&gt; \n  mutate(a_dm_manuell = a - mean(a))\n\n\n\n\n\nid\ntime\na\na_dm\na_gm\na_dm_manuell\n\n\n\n\n1\n1\n3.576438\n-0.2566380\n3.833076\n-0.2566380\n\n\n1\n2\n3.618275\n-0.2148012\n3.833076\n-0.2148012\n\n\n1\n3\n2.365406\n-1.4676704\n3.833076\n-1.4676704\n\n\n1\n4\n3.604362\n-0.2287140\n3.833076\n-0.2287140\n\n\n1\n5\n3.881178\n0.0481014\n3.833076\n0.0481014\n\n\n1\n6\n4.172778\n0.3397012\n3.833076\n0.3397012\n\n\n1\n7\n3.593205\n-0.2398718\n3.833076\n-0.2398718\n\n\n1\n8\n3.722344\n-0.1107326\n3.833076\n-0.1107326\n\n\n1\n9\n5.284937\n1.4518608\n3.833076\n1.4518608\n\n\n1\n10\n4.511841\n0.6787644\n3.833076\n0.6787644",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "01 Data Preparation Item Level.html#übung-datenaufbereitung",
    "href": "01 Data Preparation Item Level.html#übung-datenaufbereitung",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "2.8 Übung Datenaufbereitung",
    "text": "2.8 Übung Datenaufbereitung\nSchau dir den Datensatz an und repliziere die Schritte oben:\n\nDaten in Langformat transformieren und als df_uebung_lang &lt;- zuweisen.\nSkalenscores für x und y erstellen und als df_uebung_lang_scores &lt;- zuweisen.\nSkalenscores für x und y zentrieren (weiterhin in df_uebung_lang_scores).\n\n\n\n\n\n\n\nLösung\n\n\n\n\n# laden\nload(\"../data/df_cfa_exercise.RData\")\n\n# 1. Daten in Langformat transformieren - funktionen: pivot_longer(), pivot_wider()\ndf_uebung_superlang &lt;- df_cfa_exercise |&gt; \n  pivot_longer(\n    cols = -id, # All columns except id\n    names_to = c(\"variable\", \"time\"),\n    names_sep = \"_t\"\n  ) \ndf_uebung_lang &lt;- df_uebung_superlang |&gt; \n  pivot_wider(names_from = variable,\n              values_from = value) |&gt; \n  mutate(time = as.numeric(time)) \n\n# 2. Skalenscores für X und Y erstellen - funktionen: group_by(), summarise()\ndf_uebung_lang_scores &lt;- df_uebung_lang |&gt; group_by(id, time) |&gt; \n  summarise(\n    x = rowMeans(across(starts_with(\"x\")), na.rm = TRUE),\n    y = rowMeans(across(starts_with(\"y\")), na.rm = TRUE),\n    .groups = \"drop\" # group_by() wieder aufheben für den finalen Datensatz\n  )\n\n# 3. Skalenscores für X und Y zentrieren - Funktionen: de_mean()\ndf_uebung_lang_scores &lt;- df_uebung_lang_scores |&gt; \n  de_mean(x, y, grp = \"id\")\n\n\nhead(df_uebung_lang_scores)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ntime\nx\ny\nx_dm\ny_dm\nx_gm\ny_gm\n\n\n\n\n1\n1\n4.415787\n3.962804\n0.3959958\n0.1601657\n4.019792\n3.802638\n\n\n1\n2\n3.569166\n4.301619\n-0.4506258\n0.4989815\n4.019792\n3.802638\n\n\n1\n3\n4.527970\n3.908551\n0.5081786\n0.1059135\n4.019792\n3.802638\n\n\n1\n4\n3.446667\n3.494870\n-0.5731246\n-0.3077683\n4.019792\n3.802638\n\n\n1\n5\n3.900859\n3.557375\n-0.1189324\n-0.2452633\n4.019792\n3.802638\n\n\n1\n6\n3.924495\n4.196442\n-0.0952970\n0.3938045\n4.019792\n3.802638",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "01 Data Preparation Item Level.html#abspeichern-der-gebildeten-skalen",
    "href": "01 Data Preparation Item Level.html#abspeichern-der-gebildeten-skalen",
    "title": "2  Kapitel 1a: Datenaufbereitung Item Level",
    "section": "2.9 Abspeichern der gebildeten Skalen",
    "text": "2.9 Abspeichern der gebildeten Skalen\nZum Schluss speichern wir die Ergebnisse (sowohl die Items als auch die Skalen in Langformat) der Übung ab.\n\nsave(df_uebung_lang, df_uebung_lang_scores, file = \"../data/df_uebung.RData\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Kapitel 1a: Datenaufbereitung Item Level</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tagebuchstudien und Mehrebenenmodelle",
    "section": "",
    "text": "1 Einleitung\nDieses Dokument enthält Anleitungen und Übungen zur Analyse von Daten aus Tagebuchstudien mittels Mehrebenenmodellen. Es ist im Rahmen des Seminars zu Tagebuchstudien in Psychologie an der Uni Bern entstanden.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>index.qmd</span>"
    ]
  },
  {
    "objectID": "index.html#voraussetzungen",
    "href": "index.html#voraussetzungen",
    "title": "Tagebuchstudien und Mehrebenenmodelle",
    "section": "1.1 Voraussetzungen",
    "text": "1.1 Voraussetzungen\nMaterialien:\n\nRStudio (erstellt RStudio 2024.12.0, Build 467)\nR (erstellt mit R 4.4.2)\n\nKenntnisse:\n\nData Wrangling in R, Umgang mit Notebooks (.qmd)\nStatistisches Wissen zu linearen Modellen (Regressionen) und Testkonstruktion",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>index.qmd</span>"
    ]
  },
  {
    "objectID": "02 Descriptive Statistics.html",
    "href": "02 Descriptive Statistics.html",
    "title": "3  Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen",
    "section": "",
    "text": "3.1 Pakete laden\n%todo: Franzpak integrieren %\nif (!require(\"pacman\")) install.packages(\"pacman\")\n\nLoading required package: pacman\n\nif (!require(\"franzpak\")) devtools::install_github()\n\nLoading required package: franzpak\n\npacman::p_load(haven, psych,\n               sjmisc, sjPlot, writexl, lavaan,\n               tidyverse, multilevelTools, franzpak)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen</span>"
    ]
  },
  {
    "objectID": "02 Descriptive Statistics.html#daten-laden",
    "href": "02 Descriptive Statistics.html#daten-laden",
    "title": "3  Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen",
    "section": "3.2 Daten laden",
    "text": "3.2 Daten laden\n\nload(\"../data/df_cfa_long.RData\")\n\nhead(df_cfa_long_scores)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ntime\na\nb\nc\na_dm\nb_dm\nc_dm\na_gm\nb_gm\nc_gm\n\n\n\n\n1\n1\n3.576438\n2.0153094\n3.059581\n-0.2566380\n0.4476044\n-0.5267811\n3.833076\n1.567705\n3.586362\n\n\n1\n2\n3.618275\n1.6847458\n4.229828\n-0.2148012\n0.1170408\n0.6434662\n3.833076\n1.567705\n3.586362\n\n\n1\n3\n2.365406\n0.3495072\n2.465712\n-1.4676704\n-1.2181978\n-1.1206501\n3.833076\n1.567705\n3.586362\n\n\n1\n4\n3.604362\n1.4354944\n2.848375\n-0.2287140\n-0.1322106\n-0.7379871\n3.833076\n1.567705\n3.586362\n\n\n1\n5\n3.881178\n1.2395786\n3.159797\n0.0481014\n-0.3281264\n-0.4265645\n3.833076\n1.567705\n3.586362\n\n\n1\n6\n4.172778\n1.3404398\n4.261824\n0.3397012\n-0.2272652\n0.6754625\n3.833076\n1.567705\n3.586362\n\n\n\n\n\n\nSchauen wir uns nochmal die Datenstruktur unseres aufbereiteten Datensatzes an. Wir haben die Variablen:\n\nid: Gruppierungsvariable / Personen-ID, von 1 - 100\ntime: Zeitpunkt / Tag der Messung, von 1-10\na, b, c: Rohvariablen\na_dm - c_dm: Personen-zentrierte Variablen\na_gm - c_gm : Personen-Mittelwerte",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen</span>"
    ]
  },
  {
    "objectID": "02 Descriptive Statistics.html#icc-und-within-person-variance",
    "href": "02 Descriptive Statistics.html#icc-und-within-person-variance",
    "title": "3  Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen",
    "section": "3.3 ICC und Within-Person Variance",
    "text": "3.3 ICC und Within-Person Variance\nUns interessiert wie gross der Anteil der Varianz ist, der auf die zwei Ebenen der Daten entfallen (Inner-Person, Zwischen-Person-Ebene). Dies kann uns der ICC angeben. Mittels der Funktion statsBy() bekommen wir einige Analysen zu unseren Mehrebenen-Daten geliefert. Die Funktion benötigt zwei Argumente: den Datensatz und und die Gruppierungsvariable. Wir wählen entsprechend im select() die Variablen, die uns interessieren. Dies sind die Gruppierungsvariable “id” und die Rohvarianten der Variablen aus, da nur diese die Informationen über beide Ebenen enthalten. Die zerlegten Variablen mit den Kürzeln _dm und _gm brauchen wir erst später.\n\nmehrebenen_stats &lt;- df_cfa_long_scores |&gt; \n  select(id, a, b, c) |&gt; \n    statsBy(group = \"id\")\n\nWir bekommen hier manchmal Warnungen, wenn wir auch reine Level-2 Variablen eingeschlossen haben. Dies können wir jedoch ignorieren. Mit print() bekommen wir eine Übersicht über die Ergebnisse der Resultate der statsBy() Funktion.\n\nprint(mehrebenen_stats)\n\nStatistics within and between groups  \nCall: statsBy(data = select(df_cfa_long_scores, id, a, b, c), group = \"id\")\nIntraclass Correlation 1 (Percentage of variance due to groups) \n  id    a    b    c \n1.00 0.49 0.55 0.47 \nIntraclass Correlation 2 (Reliability of group differences) \n  id    a    b    c \n1.00 0.91 0.92 0.90 \neta^2 between groups  \na.bg b.bg c.bg \n0.54 0.59 0.52 \n\nTo see the correlations between and within groups, use the short=FALSE option in your print statement.\nMany results are not shown directly. To see specific objects select from the following list:\n mean sd n F ICC1 ICC2 ci1 ci2 raw rbg ci.bg pbg rwg nw ci.wg pwg etabg etawg nwg nG Call\n\n\nUns interessiert nur die Intraclass Correlation (ICC) 1. ICC(2) und Eta-Quadrat interessieren uns nicht.\nDen ICC können wir uns auch direkt angeben lassen, indem wir aus dem Listenobjekt mehrebenen_stats mit dem Dollarzeichen $ die Untervariable ICC1 anwählen.\n\nicc &lt;- mehrebenen_stats$ICC1 |&gt; \n  round(2) # runden\nicc\n\n  id    a    b    c \n1.00 0.49 0.55 0.47 \n\n\nAlle Skalen im Beispiel haben ICCs in einem angemessenen Bereich (&lt;.80). Dies heisst, dass genug tägliche Varianz vorhanden ist, um Mehrebenen-Analysen durchzuführen.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen</span>"
    ]
  },
  {
    "objectID": "02 Descriptive Statistics.html#reliabilitätsanalyse",
    "href": "02 Descriptive Statistics.html#reliabilitätsanalyse",
    "title": "3  Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen",
    "section": "3.4 Reliabilitätsanalyse",
    "text": "3.4 Reliabilitätsanalyse\nDie Reliabilitätsanalyse basiert auf den Items, nicht auf den Skalenwerten. Diese haben wir im df_cfa_long Dataframe abgespeichert.\n\nhead(df_cfa_long)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nid\ntime\na1\na2\na3\na4\na5\nb1\nb2\nb3\nb4\nb5\nc1\nc2\nc3\n\n\n\n\n1\n1\n3.336252\n3.380463\n3.223528\n4.399347\n3.542602\n3.370896\n1.697640\n0.584167\n1.576649\n2.847195\n4.325797\n1.030847\n3.822098\n\n\n1\n2\n2.149828\n5.110309\n5.678413\n2.765556\n2.387270\n2.486919\n0.952220\n2.101517\n0.331000\n2.552073\n3.364003\n5.711729\n3.613752\n\n\n1\n3\n1.613518\n3.004133\n2.503233\n1.898476\n2.807670\n0.991958\n-0.685685\n0.003147\n-0.517730\n1.955846\n2.582169\n2.659834\n2.155132\n\n\n1\n4\n3.351085\n3.852294\n4.972103\n2.612551\n3.233779\n2.248097\n0.004118\n0.711264\n2.185949\n2.028044\n2.918614\n3.163276\n2.463234\n\n\n1\n5\n3.320900\n3.694431\n4.703663\n3.476859\n4.210036\n1.953658\n0.675750\n0.921623\n0.284884\n2.361978\n2.829237\n3.910432\n2.739723\n\n\n1\n6\n4.173775\n5.658948\n3.273027\n4.192700\n3.565438\n1.544111\n-0.373186\n1.303905\n1.687402\n2.539967\n4.141474\n5.234767\n3.409232\n\n\n\n\n\n\nBei Skalen aus der Daily Erhebung nehmen wir die omegaSEM() Funktion. Als erstes Argument geben wir die Items in einem Character-Vector mittels c(), die Items werden mit Anführungszeichen angegeben. Falls ihr die Itemnamen nicht wisst, könnt ihr sie mit names(df_cfa_long) nachsehen.\n\nscalea_reliab &lt;- multilevelTools::omegaSEM(c(\"a1\", \"a2\", \"a3\", \"a4\", \"a5\"), \"id\", df_cfa_long)\nscalea_reliab$Results\n\n\n\n\n\n\nlabel\nest\nci.lower\nci.upper\n\n\n\n\n42\nomega_within\n0.7390195\n0.7120809\n0.7659581\n\n\n50\nomega_between\n0.8480644\n0.7955281\n0.9006008\n\n\n\n\n\n\nHier erscheint teils eine Warnung, weil nicht alle Personen (cluster) Varianz auf den Items haben. Dies können wir ignorieren. In den simulierten Daten, die wir verwenden, ist dies jedoch nicht der Fall. Dann können wir den Output ansehen. Omega_within gibt die Reliabilität für Unterschiede innerhalb der Person an, und Omega_between gibt die Reliabilität für Unterschiede zwischen Personen an. Die Reliabilitäten sollten über .70 liegen für eine gute Reliabilität auf beiden Leveln.\n\nscaleb_reliab &lt;- multilevelTools::omegaSEM(c(\"b1\", \"b2\", \"b3\", \"b4\", \"b5\"), \"id\", df_cfa_long)\nscaleb_reliab$Results\n\n\n\n\n\n\nlabel\nest\nci.lower\nci.upper\n\n\n\n\n42\nomega_within\n0.7439948\n0.7175652\n0.7704245\n\n\n50\nomega_between\n0.8884161\n0.8502350\n0.9265972\n\n\n\n\n\n\n\nscalec_reliab &lt;- multilevelTools::omegaSEM(c(\"c1\", \"c2\", \"c3\"), \"id\", df_cfa_long)\nscalec_reliab$Results\n\n\n\n\n\n\nlabel\nest\nci.lower\nci.upper\n\n\n\n\n28\nomega_within\n0.6276604\n0.5854945\n0.6698263\n\n\n34\nomega_between\n0.7638922\n0.6728196\n0.8549647",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen</span>"
    ]
  },
  {
    "objectID": "02 Descriptive Statistics.html#korrelationstabelle",
    "href": "02 Descriptive Statistics.html#korrelationstabelle",
    "title": "3  Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen",
    "section": "3.5 Korrelationstabelle",
    "text": "3.5 Korrelationstabelle\nIn psychologischen Artikeln ist (fast) immer die Korrelationstabelle die erste Tabelle des Artikels. Unser nächstes Ziel ist es, die Korrelationstabelle anzufertigen in der wir auch die Mittelwerte und Standardabweichungen integrieren.\n\n3.5.1 Mittelwerte\nMittelwerte wurden bereits - pro Person - durch die statsBy() Funktion gebildet. Den allgemeinen Mittelwert bekommen wir mit der Funktion summarise(). Diese erlaubt uns, zusammenfassende Werte zu bilden. Da wir dies gleich für mehrere Variablen machen, benutzen wir zudem across() um die Summary gleich für mehrere Variablen zu bilden. Die Funktion benötigt als Argumente (a) die Namen der Variablen mit c() als einen Vektor zusammengefasst, (b) die Funktionen, wie sie gebildet werden (hier: ~mean(.x, na.rm = TRUE) für das arithmetische Mittel unter Ausschluss aller nicht vorhandenen Werte) und (c) optional die Namen der ausgegebenen Variablen mittels “.names”. Wir verwenden “m_{.col}”. Abschliessend runden wir die Werte.\nErsetzt im folgenden Code in der Klammer von c() die Variablennamen mit denen, die euch interessieren, hier sowohl die täglichen als auch Baselinevariablen.\n\nmittelwerte &lt;- mehrebenen_stats$mean |&gt; \n  as_tibble() |&gt; \n  summarise(across(c(a,b,c), ~mean(.x, na.rm = TRUE)))\n\nmittelwerte\n\n\n\n\n\na\nb\nc\n\n\n\n\n3.034273\n1.949319\n1.990651\n\n\n\n\n\n\nWir sehen, dass a einen höheren Mittelwert (M = 3.03) als b und c (M = 1.94, M = 1.99) aufweist. Für die Verteilung der Variablen sehen wir uns idealerweise auch Histogramme an.\n\nhist(mehrebenen_stats$mean[,\"a\"])\n\n\n\n\n\n\n\nhist(mehrebenen_stats$mean[,\"b\"])\n\n\n\n\n\n\n\nhist(mehrebenen_stats$mean[,\"c\"])\n\n\n\n\n\n\n\n\nAlle Variablen scheinen vom Histogram her hinreichend normalverteilt.\n\n\n3.5.2 Standardabweichungen\nGanz ähnlich wie mit Mittelwerten verfahren wir für die Standardabweichung, nur dass wir hier als Funktion ~sd(.x, na.rm = TRUE) verwenden. Ersetzt auch hier im folgenden Code in der Klammer von c() die Variablennamen mit denen, die euch interessieren, hier sowohl die täglichen als auch Baselinevariablen. Die Baselinevariable “w” zeigt hier keine SD mit dieser Berechnung und muss separat berechnet werden.\n\nstandardabweichung &lt;- mehrebenen_stats$sd |&gt; \n  as_tibble() |&gt; \n  summarise(across(c(a, b, c), ~mean(.x, na.rm = TRUE)))\nstandardabweichung\n\n\n\n\n\na\nb\nc\n\n\n\n\n0.6875217\n0.6956185\n0.7549543\n\n\n\n\n\n\n\n\n3.5.3 Korrelationen\nWir wollen eine Korrelationstabelle, in der wir auf einen Blick sowohl die Zwischen-Person-Korrelationen als auch die Inner-Person-Korrelationen sehen. Die statsBy() Funktion, die wir bereits aufgerufen haben, gibt uns beides separat aus. und\n\nmehrebenen_stats$rbg |&gt; round(2) # Zwischen Person Kor.\n\n     a.bg b.bg c.bg\na.bg 1.00 0.32 0.39\nb.bg 0.32 1.00 0.29\nc.bg 0.39 0.29 1.00\n\nmehrebenen_stats$rwg |&gt; round(2) # Inner Person Kor.\n\n     a.wg b.wg c.wg\na.wg 1.00 0.22 0.25\nb.wg 0.22 1.00 0.29\nc.wg 0.25 0.29 1.00\n\n\nWir erhalten im unteren Dreieck die Inner-Person-Korrelationen, und im oberen Dreieck die Zwischen-Person-Korrelationen.\n\n\n3.5.4 Integration in Tabelle\nJetzt gilt es, die Mittelwerte, Standardabweichungen, ICCs, und Korrelationen Zwischen und Innerhalb von Personen in einer Tabelle zu integrieren. Mit der tibble() Funktion bauen wir einen neue Datensatz-Tabelle, in der wir alle Variablen integrieren.\nDie vorhergehenden Analysen zeigen wie man die einzelnen Komponenten der Tabelle erstellt. Die Funktion cortable_multilevel() führt die einzelnen Funktionen direkt zusammen.\n\ncortable_integriert &lt;- franzpak::cortable_multilevel(df_cfa_long_scores, c(\"a\", \"b\", \"c\"), grp = \"id\")\ncortable_integriert\n\n\n\n\n\nVariable\nM\nSD\nICC\n1.\n2.\n3.\n\n\n\n\n1.a\n3.03\n0.99\n.49\n-\n.32**\n.39***\n\n\n2.b\n1.95\n1.07\n.55\n.22***\n-\n.29**\n\n\n3.c\n1.99\n1.06\n.47\n.25***\n.29***\n-\n\n\n\n\n\n\n\n\n3.5.5 Export von Tabellen zu Excel\nWir exportieren die Korrelationstabelle nach Excel mittels write_xlsx().\n\n# eval: false\nwrite_xlsx(cortable_integriert, path = \"korrelationstabelle.xlsx\")\n\nDie Excel-Tabelle lässt sich dann in Word kopieren und weiter verarbeitet werden, z.B. mit den richtigen Variablennamen versehen werden etc. Damit haben wir nun die Datenaufbereitung und deskriptive Datenanalyse abgeschlossen.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen</span>"
    ]
  },
  {
    "objectID": "02 Descriptive Statistics.html#blick-hinter-die-kulissen-berechnung-von-omega-mittels-einer-mehrebenen-konfirmatorischen-faktorenanalysen",
    "href": "02 Descriptive Statistics.html#blick-hinter-die-kulissen-berechnung-von-omega-mittels-einer-mehrebenen-konfirmatorischen-faktorenanalysen",
    "title": "3  Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen",
    "section": "4.2 Blick hinter die Kulissen: Berechnung von Omega mittels einer Mehrebenen konfirmatorischen Faktorenanalysen",
    "text": "4.2 Blick hinter die Kulissen: Berechnung von Omega mittels einer Mehrebenen konfirmatorischen Faktorenanalysen\nFür eine genauere Auswertung können wir omegaSEM() mit dem Parameter savemodel = TRUE laufen lassen und uns mittels summary() die konfirmatorische Faktoranalyse (CFA) genauer ansehen.\nWie CFAs funktionieren, kann hier repetiert werden: Statistik IV - Methodenlehre\nZudem können wir uns mit lavInspect() die Modellparameter ansehen, um zu verstehen wie die Reliabilitätskoeffizient gebildet wird.\n\nscalec_reliab &lt;- multilevelTools::omegaSEM(c(\"c1\", \"c2\", \"c3\"), \"id\", df_cfa_long, savemodel = TRUE)\nscalec_reliab$Fit |&gt; summary(fit = TRUE, stand = TRUE)\n\nlavaan 0.6-18 ended normally after 32 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        15\n  Number of inequality constraints                   6\n\n  Number of observations                          1000\n  Number of clusters [id]                          100\n\nModel Test User Model:\n                                                      \n  Test statistic                                 0.000\n  Degrees of freedom                                 0\n\nModel Test Baseline Model:\n\n  Test statistic                               383.809\n  Degrees of freedom                                 6\n  P-value                                        0.000\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    1.000\n  Tucker-Lewis Index (TLI)                       1.000\n\nLoglikelihood and Information Criteria:\n\n  Loglikelihood user model (H0)              -4446.130\n  Loglikelihood unrestricted model (H1)      -4446.130\n                                                      \n  Akaike (AIC)                                8922.260\n  Bayesian (BIC)                              8995.876\n  Sample-size adjusted Bayesian (SABIC)       8948.235\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.000\n  90 Percent confidence interval - lower         0.000\n  90 Percent confidence interval - upper         0.000\n  P-value H_0: RMSEA &lt;= 0.050                       NA\n  P-value H_0: RMSEA &gt;= 0.080                       NA\n\nStandardized Root Mean Square Residual (corr metric):\n\n  SRMR (within covariance matrix)                0.000\n  SRMR (between covariance matrix)               0.000\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Observed\n  Observed information based on                Hessian\n\n\nLevel 1 [within]:\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)   Std.lv  Std.all\n  f_within =~                                                           \n    c1       (wl1)    0.596    0.043   13.816    0.000    0.596    0.595\n    c2       (wl2)    0.653    0.046   14.176    0.000    0.653    0.622\n    c3       (wl3)    0.587    0.043   13.605    0.000    0.587    0.580\n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)   Std.lv  Std.all\n    f_within          1.000                               1.000    1.000\n   .c1       (wr1)    0.648    0.048   13.565    0.000    0.648    0.645\n   .c2       (wr2)    0.675    0.054   12.435    0.000    0.675    0.613\n   .c3       (wr3)    0.677    0.048   14.183    0.000    0.677    0.663\n\n\nLevel 2 [id]:\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)   Std.lv  Std.all\n  f_between =~                                                          \n    c1       (bl1)    0.529    0.095    5.570    0.000    0.529    0.660\n    c2       (bl2)    0.704    0.106    6.614    0.000    0.704    0.803\n    c3       (bl3)    0.680    0.115    5.905    0.000    0.680    0.694\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)   Std.lv  Std.all\n   .c1                2.003    0.086   23.252    0.000    2.003    2.500\n   .c2                1.948    0.094   20.798    0.000    1.948    2.224\n   .c3                2.021    0.103   19.615    0.000    2.021    2.063\n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)   Std.lv  Std.all\n    f_betwen          1.000                               1.000    1.000\n   .c1       (br1)    0.362    0.081    4.446    0.000    0.362    0.564\n   .c2       (br2)    0.272    0.107    2.536    0.011    0.272    0.355\n   .c3       (br3)    0.497    0.120    4.132    0.000    0.497    0.518\n\nDefined Parameters:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)   Std.lv  Std.all\n    num_within        3.371    0.262   12.875    0.000    3.371    3.233\n    denom_within      5.370    0.253   21.213    0.000    5.370    5.155\n    omega_within      0.628    0.022   29.175    0.000    0.628    0.627\n    num_between       3.659    0.764    4.787    0.000    3.659    4.657\n    denom_between     4.789    0.754    6.354    0.000    4.789    6.094\n    omega_between     0.764    0.046   16.440    0.000    0.764    0.764\n\nConstraints:\n                                               |Slack|\n    wr1 - 0                                      0.648\n    wr2 - 0                                      0.675\n    wr3 - 0                                      0.677\n    br1 - 0                                      0.362\n    br2 - 0                                      0.272\n    br3 - 0                                      0.497\n\nlavInspect(scalec_reliab$Fit, \"list\") |&gt; \n  select(lhs, op, rhs, free, level, free, label, est, se) |&gt; \n  mutate(across(where(is.numeric), round, 2)) # alternatively, parTable()\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(where(is.numeric), round, 2)`.\nCaused by warning:\n! The `...` argument of `across()` is deprecated as of dplyr 1.1.0.\nSupply arguments directly to `.fns` through an anonymous function instead.\n\n  # Previously\n  across(a:b, mean, na.rm = TRUE)\n\n  # Now\n  across(a:b, \\(x) mean(x, na.rm = TRUE))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlhs\nop\nrhs\nfree\nlevel\nlabel\nest\nse\n\n\n\n\nf_within\n=~\nc1\n1\n1\nwl1\n0.60\n0.04\n\n\nf_within\n=~\nc2\n2\n1\nwl2\n0.65\n0.05\n\n\nf_within\n=~\nc3\n3\n1\nwl3\n0.59\n0.04\n\n\nf_within\n~~\nf_within\n0\n1\n\n1.00\n0.00\n\n\nc1\n~~\nc1\n4\n1\nwr1\n0.65\n0.05\n\n\nc2\n~~\nc2\n5\n1\nwr2\n0.68\n0.05\n\n\nc3\n~~\nc3\n6\n1\nwr3\n0.68\n0.05\n\n\nc1\n~1\n\n0\n1\n\n0.00\n0.00\n\n\nc2\n~1\n\n0\n1\n\n0.00\n0.00\n\n\nc3\n~1\n\n0\n1\n\n0.00\n0.00\n\n\nf_within\n~1\n\n0\n1\n\n0.00\n0.00\n\n\nf_between\n=~\nc1\n7\n2\nbl1\n0.53\n0.10\n\n\nf_between\n=~\nc2\n8\n2\nbl2\n0.70\n0.11\n\n\nf_between\n=~\nc3\n9\n2\nbl3\n0.68\n0.12\n\n\nf_between\n~~\nf_between\n0\n2\n\n1.00\n0.00\n\n\nc1\n~~\nc1\n10\n2\nbr1\n0.36\n0.08\n\n\nc2\n~~\nc2\n11\n2\nbr2\n0.27\n0.11\n\n\nc3\n~~\nc3\n12\n2\nbr3\n0.50\n0.12\n\n\nc1\n~1\n\n13\n2\n\n2.00\n0.09\n\n\nc2\n~1\n\n14\n2\n\n1.95\n0.09\n\n\nc3\n~1\n\n15\n2\n\n2.02\n0.10\n\n\nf_between\n~1\n\n0\n2\n\n0.00\n0.00\n\n\nwr1\n&gt;\n0\n0\n0\n\n0.65\n0.00\n\n\nwr2\n&gt;\n0\n0\n0\n\n0.68\n0.00\n\n\nwr3\n&gt;\n0\n0\n0\n\n0.68\n0.00\n\n\nnum_within\n:=\n(wl1+wl2+wl3)^2\n0\n0\nnum_within\n3.37\n0.26\n\n\ndenom_within\n:=\n(wl1+wl2+wl3)^2+(wr1+wr2+wr3)\n0\n0\ndenom_within\n5.37\n0.25\n\n\nomega_within\n:=\nnum_within/denom_within\n0\n0\nomega_within\n0.63\n0.02\n\n\nbr1\n&gt;\n0\n0\n0\n\n0.36\n0.00\n\n\nbr2\n&gt;\n0\n0\n0\n\n0.27\n0.00\n\n\nbr3\n&gt;\n0\n0\n0\n\n0.50\n0.00\n\n\nnum_between\n:=\n(bl1+bl2+bl3)^2\n0\n0\nnum_between\n3.66\n0.76\n\n\ndenom_between\n:=\n(bl1+bl2+bl3)^2+(br1+br2+br3)\n0\n0\ndenom_between\n4.79\n0.75\n\n\nomega_between\n:=\nnum_between/denom_between\n0\n0\nomega_between\n0.76\n0.05\n\n\n\n\n\n\nWie der Output zeigt, ergibt sich die Omega-Reliabilität aus dem Anteil der durch den Faktor (f_within für den Faktor auf Level-1 bzw. f_between für den Faktor auf Level-2) erklärten Varianz der Items (Summe aller Item-Ladungen, quadriert für Varianz) geteilt durch die Gesamtvarianz der Items (durch Faktor erklärte Varianz der Items + Residualvarianz, d.h. übrigbleibende Varianz der Items). Diese Formel wird pro Varianzebene (Level-1, also tägliche Schwankungen innerhalb der Person) und Level-2 (Unterschiede zwischen Personen) getrennt berechnet.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen</span>"
    ]
  },
  {
    "objectID": "02 Descriptive Statistics.html#zusatz",
    "href": "02 Descriptive Statistics.html#zusatz",
    "title": "3  Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen",
    "section": "4.1 Zusatz",
    "text": "4.1 Zusatz\nDie folgenden Analysen sind optional, geben aber ein tieferes Verständnis des Materials.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Kapitel 2: Deskriptive Analysen und Überprüfung von Voraussetzungen</span>"
    ]
  }
]